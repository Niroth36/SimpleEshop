pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'niroth36/simpleeshop'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKERFILE_PATH = 'Dockerfile.x86'
        CONTROL_PLANE_IP = '4.210.149.226'
    }

    stages {
        stage('Initialize') {
            steps {
                // Clean workspace manually
                cleanWs()
                echo '‚úÖ Workspace cleaned'
            }
        }

        stage('Clone Repository') {
            steps {
                // Use checkout scm for better integration with Jenkins
                checkout scm
                sh 'ls -la Dockerfile.x86 || echo "Dockerfile not found"'
            }
        }

        stage('Install SSH Client') {
            steps {
                script {
                    sh """
                        apt-get update
                        apt-get install -y openssh-client
                    """
                }
            }
        }

        stage('Build on Control Plane') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'control-plane-credentials', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        sh """
                            # Set up SSH key
                            mkdir -p ~/.ssh
                            cp \${SSH_KEY} ~/.ssh/id_rsa
                            chmod 600 ~/.ssh/id_rsa
                            ssh-keyscan -H ${CONTROL_PLANE_IP} >> ~/.ssh/known_hosts

                            # SSH to control plane and build
                            ssh -i ~/.ssh/id_rsa \${SSH_USER}@${CONTROL_PLANE_IP} '
                                echo "üèóÔ∏è Starting build on control plane..."

                                # Clean up any previous build
                                rm -rf /tmp/simpleeshop-build-${BUILD_NUMBER}
                                mkdir -p /tmp/simpleeshop-build-${BUILD_NUMBER}
                                cd /tmp/simpleeshop-build-${BUILD_NUMBER}

                                # Clone the repository
                                echo "üì• Cloning repository..."
                                git clone https://github.com/Niroth36/SimpleEshop.git .

                                # Verify Dockerfile exists
                                ls -la ${DOCKERFILE_PATH}

                                # Build the Docker image
                                echo "üê≥ Building Docker image..."
                                docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f ${DOCKERFILE_PATH} .
                                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest

                                # List the built image
                                echo "‚úÖ Built images:"
                                docker images | grep ${DOCKER_IMAGE}
                            '
                        """
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([
                        usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS'),
                        sshUserPrivateKey(credentialsId: 'control-plane-credentials', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')
                    ]) {
                        sh """
                            ssh -i ~/.ssh/id_rsa \${SSH_USER}@${CONTROL_PLANE_IP} '
                                echo "üöÄ Pushing to Docker Hub..."

                                # Login to Docker Hub
                                echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin

                                # Push the images
                                docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                                docker push ${DOCKER_IMAGE}:latest

                                echo "‚úÖ Successfully pushed images to Docker Hub"

                                # Logout for security
                                docker logout
                            '
                        """
                    }
                }
            }
        }

        stage('Cleanup Control Plane') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'control-plane-credentials', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        sh """
                            ssh -i ~/.ssh/id_rsa \${SSH_USER}@${CONTROL_PLANE_IP} '
                                echo "üßπ Cleaning up..."

                                # Remove local images to save space
                                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                                docker rmi ${DOCKER_IMAGE}:latest || true

                                # Clean up build directory
                                rm -rf /tmp/simpleeshop-build-${BUILD_NUMBER}

                                echo "‚úÖ Cleanup completed"
                            '
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Pipeline completed successfully!"
            echo "üê≥ Image pushed to Docker Hub: ${DOCKER_IMAGE}:${DOCKER_TAG}"
            echo "üîó Latest tag: ${DOCKER_IMAGE}:latest"

            // Update deployment YAML with new image tag and push to Git only if web-app files changed
            script {
                // Create a temporary directory for Git operations
                def gitDir = "${WORKSPACE}/git-operations-${BUILD_NUMBER}"
                sh "mkdir -p ${gitDir}"

                // Clone the repository into the temporary directory
                dir(gitDir) {
                    // Use checkout scm for better integration with Jenkins
                    checkout scm

                    // Check if there are changes in the web-app directory or if build was triggered manually
                    def webAppChanged = sh(script: 'git diff --name-only HEAD~1 HEAD | grep -q "^web-app/" || echo "false"', returnStdout: true).trim()
                    def isManualBuild = currentBuild.getBuildCauses().toString().contains('UserIdCause')

                    echo "Build cause: ${currentBuild.getBuildCauses()}"
                    echo "Is manual build: ${isManualBuild}"

                    if (webAppChanged != "false" || isManualBuild) {
                        if (webAppChanged != "false") {
                            echo "üîç Changes detected in web-app directory. Updating deployment YAML..."
                        } else if (isManualBuild) {
                            echo "üîç Manual build detected. Updating deployment YAML..."
                        }

                        // Update the image tag in the deployment YAML
                        sh """
                            # Make sure we're in the Git directory
                            pwd
                            ls -la

                            # Update the deployment YAML
                            sed -i 's|image: ${DOCKER_IMAGE}:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|' kubernetes/applications/simpleeshop-deployment.yaml

                            # Configure Git
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins CI"

                            # Add and commit changes
                            git add kubernetes/applications/simpleeshop-deployment.yaml
                            git commit -m "Update image tag to ${DOCKER_TAG} [ci skip]"
                        """

                        // Push changes using credentials
                        withCredentials([usernamePassword(credentialsId: 'github-token', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                            sh """
                                git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Niroth36/SimpleEshop.git
                                git push origin master
                            """
                        }
                        echo "‚úÖ Updated deployment YAML and pushed to Git"
                    } else {
                        echo "‚ÑπÔ∏è No changes detected in web-app directory. Skipping deployment YAML update."
                    }
                }

                // Clean up the temporary directory
                sh "rm -rf ${gitDir}"
            }
        }
        failure {
            echo "‚ùå Pipeline failed. Check the logs for details."
        }
        always {
            deleteDir()
        }
    }
}