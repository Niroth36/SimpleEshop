pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'niroth36/simpleeshop'
        GITOPS_REPO = 'https://github.com/Niroth36/SimpleEshop.git'
        GITOPS_CREDENTIALS = 'github-token'
        APP_NAME = 'simpleeshop-webapp'
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    env.IMAGE_TAG = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.BUILD_NUMBER_TAG = "${env.BUILD_NUMBER}-${env.IMAGE_TAG}"
                    env.FULL_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER_TAG}"
                }
                echo "üèóÔ∏è Building: ${env.FULL_IMAGE_TAG}"
            }
        }

        stage('Check for Web App Changes') {
            steps {
                script {
                    def changedFiles = sh(
                        script: 'git diff --name-only HEAD~1 HEAD || echo "first-build"',
                        returnStdout: true
                    ).trim()

                    echo "üìù Changed files: ${changedFiles}"

                    def webAppChanged = sh(
                        script: 'git diff --name-only HEAD~1 HEAD | grep -q "^web-app/" && echo "true" || echo "false"',
                        returnStdout: true
                    ).trim()

                    if (changedFiles == "first-build") {
                        echo "üéØ First build or no previous commit - proceeding with build"
                        env.SHOULD_BUILD = "true"
                    } else if (webAppChanged == "true") {
                        echo "‚úÖ Changes detected in web-app directory - proceeding with build"
                        env.SHOULD_BUILD = "true"
                    } else if (currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause').size() > 0) {
                        echo "üîÑ Manual build triggered - proceeding with build"
                        env.SHOULD_BUILD = "true"
                    } else {
                        echo "‚ÑπÔ∏è No changes in web-app directory - skipping Docker build"
                        env.SHOULD_BUILD = "false"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            when {
                environment name: 'SHOULD_BUILD', value: 'true'
            }
            steps {
                dir('web-app') {
                    script {
                        if (!fileExists('package-lock.json')) {
                            echo "‚ö†Ô∏è package-lock.json not found, running npm install to generate it"
                            sh 'npm install'
                        } else {
                            sh 'npm ci'
                        }
                    }
                }
            }
        }

        stage('Run Tests') {
            when {
                environment name: 'SHOULD_BUILD', value: 'true'
            }
            parallel {
                stage('Unit Tests') {
                    steps {
                        dir('web-app') {
                            sh 'npm test || echo "Tests not configured"'
                        }
                    }
                }
                stage('Lint Code') {
                    steps {
                        dir('web-app') {
                            sh 'npm run lint || echo "Lint not configured"'
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            when {
                environment name: 'SHOULD_BUILD', value: 'true'
            }
            steps {
                script {
                    // Create a pod template for Kaniko with optimized settings
                    def kanikoYaml = """
                        apiVersion: v1
                        kind: Pod
                        spec:
                          containers:
                          - name: kaniko
                            image: gcr.io/kaniko-project/executor:debug
                            imagePullPolicy: IfNotPresent
                            command:
                            - /busybox/cat
                            tty: true
                            resources:
                              requests:
                                memory: "16Mi"
                                cpu: "5m"
                              limits:
                                memory: "256Mi"
                                cpu: "100m"
                            volumeMounts:
                            - name: docker-config
                              mountPath: /kaniko/.docker
                          restartPolicy: Never
                          terminationGracePeriodSeconds: 5
                          tolerations:
                          - operator: "Exists"
                          volumes:
                          - name: docker-config
                            secret:
                              secretName: docker-hub-secret
                              items:
                              - key: .dockerconfigjson
                                path: config.json
                    """

                    // Run Kaniko in a dedicated pod
                    podTemplate(yaml: kanikoYaml) {
                        node(POD_LABEL) {
                            // Get the code again in the Kaniko pod
                            checkout scm

                            // Build and push the image with Kaniko
                            container('kaniko') {
                                sh """
                                    /kaniko/executor \\
                                        --dockerfile=Dockerfile.x86 \\
                                        --context=\$(pwd) \\
                                        --destination=${FULL_IMAGE_TAG} \\
                                        --destination=${DOCKER_IMAGE}:latest \\
                                        --cache=true \\
                                        --cache-ttl=24h \\
                                        --skip-tls-verify
                                """
                                echo "‚úÖ Image built and pushed: ${FULL_IMAGE_TAG}"
                            }
                        }
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            when {
                environment name: 'SHOULD_BUILD', value: 'true'
            }
            steps {
                script {
                    withCredentials([string(credentialsId: GITOPS_CREDENTIALS, variable: 'GIT_TOKEN')]) {
                        sh """
                            git config user.email "jenkins@simpleeshop.local"
                            git config user.name "Jenkins CI/CD"

                            echo "üîç Looking for deployment manifests..."
                            find kubernetes/ -name "*deployment*.yaml" -type f | head -5

                            if [ -f kubernetes/applications/simpleeshop-deployment.yaml ]; then
                                echo "üìù Updating kubernetes/applications/simpleeshop-deployment.yaml"
                                sed -i 's|image: ${DOCKER_IMAGE}:.*|image: ${FULL_IMAGE_TAG}|g' kubernetes/applications/simpleeshop-deployment.yaml
                                grep "image:" kubernetes/applications/simpleeshop-deployment.yaml
                            elif [ -f kubernetes/simpleeshop-deployment.yaml ]; then
                                echo "üìù Updating kubernetes/simpleeshop-deployment.yaml"
                                sed -i 's|image: ${DOCKER_IMAGE}:.*|image: ${FULL_IMAGE_TAG}|g' kubernetes/simpleeshop-deployment.yaml
                                grep "image:" kubernetes/simpleeshop-deployment.yaml
                            else
                                echo "‚ö†Ô∏è Searching for any deployment file with simpleeshop..."
                                find . -name "*simpleeshop*deployment*.yaml" -type f
                                find . -name "*deployment*.yaml" -type f | grep -i simple || echo "No simpleeshop deployment found"
                            fi

                            if git diff --quiet; then
                                echo "‚ÑπÔ∏è No changes to commit"
                            else
                                echo "üìã Changes detected, committing..."
                                git add kubernetes/
                                git commit -m "üöÄ Update ${APP_NAME} image to ${BUILD_NUMBER_TAG}"
                                git push https://x-access-token:${GIT_TOKEN}@github.com/Niroth36/SimpleEshop.git HEAD:master
                                echo "‚úÖ Kubernetes manifests updated!"
                            fi
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }

        success {
            script {
                if (env.SHOULD_BUILD == "true") {
                    echo """
                    üéâ SUCCESS: SimpleEshop WebApp CI/CD Completed!

                    üì¶ Image: ${FULL_IMAGE_TAG}
                    üöÄ Deployment: Updated via GitOps
                    üåê URL: http://4.210.149.226:30000
                    """
                }
            }
        }

        failure {
            echo """
            ‚ùå FAILED: Check Docker Hub secret and GitHub credentials
            üìã Build: ${BUILD_NUMBER} | Commit: ${env.IMAGE_TAG}
            """
        }
    }
}
