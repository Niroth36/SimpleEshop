   // Jenkinsfile for building and deploying the SimpleEshop web application
   // This pipeline uses Kubernetes to run the build in containers with Kaniko for Docker image building
   // Resource limits and requests have been added to prevent pod scheduling issues
   // If pods are stuck in "ContainerCreating" state, check:
   // 1. Available resources in the cluster: kubectl describe nodes
   // 2. Pod events: kubectl describe pod <pod-name> -n jenkins
   // 3. Container logs: kubectl logs <pod-name> -c <container-name> -n jenkins
   pipeline {
       agent {
           kubernetes {
               yaml """
                   apiVersion: v1
                   kind: Pod
                   spec:
                     # Add node selector to target specific nodes if needed
                     # nodeSelector:
                     #   kubernetes.io/os: linux

                     # Add tolerations if needed
                     # tolerations:
                     # - key: "key"
                     #   operator: "Equal"
                     #   value: "value"
                     #   effect: "NoSchedule"

                     containers:
                     - name: jnlp
                       image: jenkins/inbound-agent:latest
                       imagePullPolicy: IfNotPresent
                       args: ['\$(JENKINS_SECRET)', '\$(JENKINS_NAME)']
                       resources:
                         requests:
                           memory: "256Mi"
                           cpu: "100m"
                         limits:
                           memory: "512Mi"
                           cpu: "500m"

                     - name: node
                       image: node:18-alpine
                       imagePullPolicy: IfNotPresent
                       command:
                       - cat
                       tty: true
                       resources:
                         requests:
                           memory: "256Mi"
                           cpu: "100m"
                         limits:
                           memory: "1Gi"
                           cpu: "500m"

                     - name: kaniko
                       image: gcr.io/kaniko-project/executor:debug
                       imagePullPolicy: IfNotPresent
                       command:
                       - cat
                       tty: true
                       resources:
                         requests:
                           memory: "512Mi"
                           cpu: "200m"
                         limits:
                           memory: "2Gi"
                           cpu: "1000m"
                       volumeMounts:
                       - name: docker-config
                         mountPath: /kaniko/.docker

                     - name: git
                       image: alpine/git:latest
                       imagePullPolicy: IfNotPresent
                       command:
                       - cat
                       tty: true
                       resources:
                         requests:
                           memory: "128Mi"
                           cpu: "50m"
                         limits:
                           memory: "256Mi"
                           cpu: "200m"

                     volumes:
                     - name: docker-config
                       secret:
                         secretName: docker-hub-secret
                         items:
                         - key: .dockerconfigjson
                           path: config.json
               """
               defaultContainer 'jnlp'
           }
       }

       environment {
           DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
           DOCKER_IMAGE = 'niroth36/simpleeshop'
           DOCKER_TAG = "${env.BUILD_NUMBER}"
       }

       stages {
           stage('Checkout') {
               steps {
                   container('git') {
                       checkout scm
                       script {
                           env.IMAGE_TAG = sh(
                               script: "git rev-parse --short HEAD",
                               returnStdout: true
                           ).trim()
                           env.BUILD_NUMBER_TAG = "${env.BUILD_NUMBER}-${env.IMAGE_TAG}"
                           env.FULL_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_NUMBER_TAG}"
                       }
                       echo "Building: ${env.FULL_IMAGE_TAG}"
                   }
               }
           }

           stage('Check for Web App Changes') {
               steps {
                   container('git') {
                       script {
                           // Get the list of changed files
                           def changedFiles = sh(script: 'git diff --name-only HEAD^ HEAD || echo "first-build"', returnStdout: true).trim()

                           // Check if any files in the web-app directory have changed
                           def webAppChanged = sh(script: 'git diff --name-only HEAD^ HEAD | grep -q "^web-app/" && echo "true" || echo "false"', returnStdout: true).trim()

                           if (changedFiles == "first-build") {
                               echo "First build or no previous commit - proceeding with build"
                               env.SHOULD_BUILD = "true"
                           } else if (webAppChanged == "true") {
                               echo "Changes detected in web-app directory. Proceeding with build."
                               env.SHOULD_BUILD = "true"
                           } else {
                               echo "No changes detected in web-app directory. Skipping build."
                               env.SHOULD_BUILD = "false"
                               currentBuild.result = 'SUCCESS'
                           }
                       }
                   }
               }
           }

           stage('Install Dependencies') {
               when {
                   environment name: 'SHOULD_BUILD', value: 'true'
               }
               steps {
                   container('node') {
                       dir('web-app/server') {
                           script {
                               if (!fileExists('package-lock.json')) {
                                   echo "package-lock.json not found, running npm install to generate it"
                                   sh 'npm install'
                               } else {
                                   sh 'npm ci || npm install'
                               }
                           }
                       }
                   }
               }
           }

           stage('Lint') {
               when {
                   environment name: 'SHOULD_BUILD', value: 'true'
               }
               steps {
                   container('node') {
                       dir('web-app/server') {
                           // Add linting if you have ESLint configured
                           sh 'echo "Linting would run here if configured"'
                       }
                   }
               }
           }

           stage('Test') {
               when {
                   environment name: 'SHOULD_BUILD', value: 'true'
               }
               steps {
                   container('node') {
                       dir('web-app/server') {
                           // Run tests if you have them configured
                           sh 'echo "Tests would run here if configured"'
                       }
                   }
                   // Skip integration tests that require Docker as they won't work in this environment
                   echo "Skipping integration tests that require Docker"
               }
           }

           stage('Build and Push Docker Image with Kaniko') {
               when {
                   environment name: 'SHOULD_BUILD', value: 'true'
               }
               steps {
                   container('kaniko') {
                       script {
                           sh """
                               /kaniko/executor \\
                                   --dockerfile=Dockerfile.x86 \\
                                   --context=. \\
                                   --destination=${DOCKER_IMAGE}:${BUILD_NUMBER_TAG} \\
                                   --destination=${DOCKER_IMAGE}:latest \\
                                   --cache=true \\
                                   --cache-ttl=24h
                           """
                           echo "Image built and pushed: ${DOCKER_IMAGE}:${BUILD_NUMBER_TAG}"
                       }
                   }
               }
           }

           stage('Update Kubernetes Manifests') {
               when {
                   environment name: 'SHOULD_BUILD', value: 'true'
               }
               steps {
                   container('git') {
                       script {
                           withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                               sh """
                                   git config user.email "jenkins@simpleeshop.local"
                                   git config user.name "Jenkins CI/CD"

                                   echo "Looking for deployment manifests..."
                                   find kubernetes/ -name "*deployment*.yaml" -type f | head -5

                                   if [ -f kubernetes/applications/simpleeshop-deployment.yaml ]; then
                                       echo "Updating kubernetes/applications/simpleeshop-deployment.yaml"
                                       sed -i "s|image: ${DOCKER_IMAGE}:.*|image: ${FULL_IMAGE_TAG}|g" kubernetes/applications/simpleeshop-deployment.yaml
                                       grep "image:" kubernetes/applications/simpleeshop-deployment.yaml
                                   elif [ -f kubernetes/simpleeshop-deployment.yaml ]; then
                                       echo "Updating kubernetes/simpleeshop-deployment.yaml"
                                       sed -i "s|image: ${DOCKER_IMAGE}:.*|image: ${FULL_IMAGE_TAG}|g" kubernetes/simpleeshop-deployment.yaml
                                       grep "image:" kubernetes/simpleeshop-deployment.yaml
                                   else
                                       echo "Searching for any deployment file with simpleeshop..."
                                       find . -name "*simpleeshop*deployment*.yaml" -type f
                                       find . -name "*deployment*.yaml" -type f | grep -i simple || echo "No simpleeshop deployment found"
                                   fi

                                   if git diff --quiet; then
                                       echo "No changes to commit"
                                   else
                                       echo "Changes detected, committing..."
                                       git add kubernetes/
                                       git commit -m "Update web-app image to ${BUILD_NUMBER_TAG}"
                                       git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Niroth36/SimpleEshop.git HEAD:main
                                       echo "Kubernetes manifests updated!"
                                   fi
                               """
                           }
                       }
                   }
               }
           }
       }

       post {
           always {
               deleteDir()
           }
           success {
               script {
                   if (env.SHOULD_BUILD == "true") {
                       echo """
                       SUCCESS: Web App Pipeline completed successfully!

                       Image: ${FULL_IMAGE_TAG}
                       Deployment: Updated via GitOps
                       """
                   } else {
                       echo "Web App Pipeline completed successfully! (No changes detected)"
                   }
               }
           }
           failure {
               echo """
               FAILED: Web App Pipeline failed!

               Check the logs for more details. Common issues:
               - Pod scheduling issues (resource constraints)
               - Image pull failures
               - Secret mounting problems

               Build: ${BUILD_NUMBER} | Commit: ${env.IMAGE_TAG ?: 'unknown'}
               """
           }
       }
   }
