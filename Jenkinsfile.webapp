pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'niroth36/simpleeshop'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        DOCKERFILE_PATH = 'Dockerfile.x86'
        CONTROL_PLANE_IP = '4.210.149.226'
    }

    stages {
        stage('Initialize') {
            steps {
                // Clean workspace manually
                cleanWs()
                echo '‚úÖ Workspace cleaned'
            }
        }

        stage('Clone Repository') {
            steps {
                // Just use checkout scm if you're using GitHub + Jenkins integration
                checkout scm
                sh 'ls -la Dockerfile.x86 || echo "Dockerfile not found"'
            }
        }

        stage('Install SSH Client') {
            steps {
                sh """
                    apt-get update && \
                    apt-get install -y openssh-client
                """
            }
        }

        stage('Build & Push via Control Plane') {
            steps {
                script {
                    withCredentials([
                        sshUserPrivateKey(credentialsId: 'control-plane-credentials', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER'),
                        usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')
                    ]) {
                        // Setup SSH keys
                        sh """
                            mkdir -p ~/.ssh
                            cp \${SSH_KEY} ~/.ssh/id_rsa
                            chmod 600 ~/.ssh/id_rsa
                            ssh-keyscan -H ${CONTROL_PLANE_IP} >> ~/.ssh/known_hosts
                        """

                        // Clean up previous build dir on control plane
                        sh """
                            ssh -i ~/.ssh/id_rsa \${SSH_USER}@${CONTROL_PLANE_IP} "rm -rf /tmp/simpleeshop-build-${env.BUILD_NUMBER} || true"
                            scp -i ~/.ssh/id_rsa -r . \${SSH_USER}@${CONTROL_PLANE_IP}:/tmp/simpleeshop-build-${env.BUILD_NUMBER}
                        """

                        // Build and push on remote host
                        sh """
                            ssh -i ~/.ssh/id_rsa \${SSH_USER}@${CONTROL_PLANE_IP} '
                                set -e
                                cd /tmp/simpleeshop-build-${env.BUILD_NUMBER}

                                echo "üèóÔ∏è Building Docker image..."
                                docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} -f ${DOCKERFILE_PATH} .

                                echo "üè∑Ô∏è Tagging latest..."
                                docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest

                                echo "üîê Logging into Docker Hub..."
                                echo "\${DOCKER_PASS}" | docker login -u "\${DOCKER_USER}" --password-stdin

                                echo "üì§ Pushing to Docker Hub..."
                                docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                                docker push ${DOCKER_IMAGE}:latest

                                echo "üßπ Cleaning up images..."
                                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                                docker rmi ${DOCKER_IMAGE}:latest || true

                                echo "‚úÖ Push completed successfully."
                            '
                        """
                    }
                }
            }
        }

        stage('Cleanup Control Plane') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'control-plane-credentials', keyFileVariable: 'SSH_KEY', usernameVariable: 'SSH_USER')]) {
                        sh """
                            ssh -i ~/.ssh/id_rsa \${SSH_USER}@${CONTROL_PLANE_IP} "
                                rm -rf /tmp/simpleeshop-build-${env.BUILD_NUMBER}
                                echo 'üßπ Temporary build directory removed.'
                            "
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            echo 'üßπ Final cleanup completed'
        }
        success {
            echo "üéâ Pipeline completed successfully!"
            echo "üê≥ Image pushed to Docker Hub: ${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
        failure {
            echo "‚ùå Pipeline failed. Check the logs for details."
        }
    }
}